@model Frontend.WebApp.Models.ReservaIndexViewModel

@{
    Layout = null;
    ViewData["Title"] = "Mantenimiento de Reservas";
    @Html.Partial("_NavAdmin")
    int totalPages = Model.totalPages;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<style>
    .custom-pagination .btn {
        min-width: 20px;
        border-radius: 8px;
        font-weight: 500;
        font-size: 1rem;
        margin: 0 2px;
        box-shadow: none;
    }

    .custom-pagination .btn-dark {
        background: #23272b;
        color: #fff;
        border-color: #23272b;
    }

    .custom-pagination .btn.disabled, .custom-pagination .btn:disabled {
        background: #fff;
        color: #adb5bd;
        border-color: #ced4da;
        cursor: not-allowed;
    }
</style>
<body class="bg-light">
    <br />
    <div class="container-fluid">
        <div class="mx-auto my-5 p-4 bg-white rounded-4 shadow" style="max-width: 1100px;">
            <h2 class="text-center fw-bold mb-4" style="font-size:2rem; letter-spacing:1px;">MANTENIMIENTO DE RESERVAS</h2>
            <div class="d-flex mb-3 gap-2">
                <!-- Puedes agregar un botón de "Agregar Reserva" si lo necesitas -->
                <button id="toggleFiltrosBtn" class="btn btn-outline-secondary px-4 py-2 fs-6">
                    <i class="fa fa-sliders-h me-2"></i> Filtros
                </button>
            </div>
            <!-- Filtros -->
            <div id="filtrosForm" class="mb-4" style="display:none;">
                <form class="border rounded-3 p-3 bg-white" onsubmit="event.preventDefault(); filtrarPorFechas();">
                    <div class="row mb-3">
                        <div class="col-md-4 d-flex flex-column">
                            <label for="fechaInicio" class="form-label fw-semibold">Desde</label>
                            <input type="date" id="fechaInicio" class="form-control" />
                        </div>
                        <div class="col-md-4 d-flex flex-column">
                            <label for="fechaFin" class="form-label fw-semibold">Hasta</label>
                            <input type="date" id="fechaFin" class="form-control" />
                        </div>
                        <div class="col-md-4 d-flex flex-column">
                            <label for="estadoFiltro" class="form-label fw-semibold">Estado</label>
                            <select id="estadoFiltro" class="form-select">
                                <option value="">Seleccionar Estado</option>
                                <option value="Solicitado">Solicitado</option>
                                <option value="Aprobado">Aprobado</option>
                                <option value="Cancelado">Cancelado</option>
                                <option value="Finalizado">Finalizado</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 d-flex align-items-center mb-2">
                            <button type="button" onclick="filtrarPorFechas()" class="btn btn-dark w-100 me-2">Filtrar por Fechas</button>
                        </div>
                        <div class="col-md-4 d-flex align-items-center mb-2">
                            <button type="button" onclick="filtrarPorEstado()" class="btn btn-secondary w-100 me-2">Filtrar por Estado</button>
                        </div>
                        <div class="col-md-4 d-flex align-items-center mb-2">
                            <button type="button" onclick="limpiarFiltros()" class="btn btn-outline-secondary w-100">Limpiar</button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="table-responsive">
                <table id="reservas-table" class="table table-bordered align-middle">
                    <thead class="table-dark text-white text-center">
                        <tr>
                            <th>ID</th>
                            <th>Cliente</th>
                            <th>Inmueble</th>
                            <th>Fecha Inicio</th>
                            <th>Fecha Fin</th>
                            <th>Monto</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="tablaReservas">
                        @if (Model.reservas == null || !Model.reservas.Any())
                        {
                            <tr>
                                <td colspan="8" class="text-center text-secondary">No se encontraron reservas.</td>
                            </tr>
                        }
                        else
                        {
                            int rowIndex = 0;
                            foreach (var reserva in Model.reservas)
                            {
                                <tr class="@(rowIndex % 2 == 0 ? "" : "table-light")">
                                    <td class="text-center">@reserva.ID_Solicitud</td>
                                    <td class="text-center">@reserva.ID_Cliente</td>
                                    <td class="text-center">@reserva.ID_Inmueble</td>
                                    <td class="text-center">@reserva.Fecha_Inicio_Reserva.ToString("dd/MM/yyyy")</td>
                                    <td class="text-center">@reserva.Fecha_Fin_Reserva.ToString("dd/MM/yyyy")</td>
                                    <td class="text-center">S/. @reserva.Monto_Total.ToString("N2")</td>
                                    <td class="text-center">
                                        <span class="badge @GetEstadoBadgeClass(reserva.Estado_Reserva)">
                                            @reserva.Estado_Reserva
                                        </span>
                                    </td>
                                    <td class="text-center">
                                        <a href="javascript:void(0);" onclick="verDetalle(@reserva.ID_Solicitud)" title="Detalle" class="text-dark me-2">
                                            <i class="fa fa-magnifying-glass"></i>
                                        </a>
                                        <a href="javascript:void(0);" onclick="cambiarEstado(@reserva.ID_Solicitud)" title="Editar" class="text-dark me-2">
                                            <i class="fa fa-pen"></i>
                                        </a>
                                        <a href="javascript:void(0);" onclick="confirmarEliminacion(@reserva.ID_Solicitud)" title="Eliminar" class="text-danger">
                                            <i class="fa fa-trash"></i>
                                        </a>
                                    </td>
                                </tr>
                                rowIndex++;
                            }
                        }
                    </tbody>
                </table>
            </div>
            <!-- Paginación -->
            <nav class="mt-4 d-flex justify-content-center custom-pagination">
                @if (totalPages > 1)
                {
                    <a href="javascript:void(0)" onclick="cambiarPagina(0)"
                       class="btn btn-outline-secondary @(Model.currentPage == 0 ? "disabled" : "")">
                        Primera
                    </a>
                    <a href="javascript:void(0)" onclick="cambiarPagina(@(Model.currentPage - 1))"
                       class="btn btn-outline-secondary @(Model.currentPage <= 0 ? "disabled" : "")">
                        &laquo; Prev
                    </a>
                    @for (int i = 0; i < totalPages; i++)
                    {
                        <a href="javascript:void(0)" onclick="cambiarPagina(@i)"
                           class="btn @(i == Model.currentPage ? "btn-dark" : "btn-outline-secondary")">
                            @(i + 1)
                        </a>
                    }
                    <a href="javascript:void(0)" onclick="cambiarPagina(@(Model.currentPage + 1))"
                       class="btn btn-outline-secondary @(Model.currentPage >= totalPages - 1 ? "disabled" : "")">
                        Next &raquo;
                    </a>
                    <a href="javascript:void(0)" onclick="cambiarPagina(@(totalPages - 1))"
                       class="btn btn-outline-secondary @(Model.currentPage == totalPages - 1 ? "disabled" : "")">
                        Última
                    </a>
                }
            </nav>
        </div>
    </div>
    <br />

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const toggleFiltrosBtn = document.getElementById('toggleFiltrosBtn');
            const filtrosForm = document.getElementById('filtrosForm');
            const visible = localStorage.getItem("filtrosReservasVisible") === "true";
            filtrosForm.style.display = visible ? "block" : "none";
            toggleFiltrosBtn.innerHTML = visible
                ? 'Ocultar Filtros'
                : '<i class="fa fa-sliders-h me-2"></i> Filtros';

            toggleFiltrosBtn.addEventListener("click", () => {
                const currentlyVisible = filtrosForm.style.display === "block";
                filtrosForm.style.display = currentlyVisible ? "none" : "block";
                localStorage.setItem("filtrosReservasVisible", !currentlyVisible);
                toggleFiltrosBtn.innerHTML = !currentlyVisible
                    ? 'Ocultar Filtros'
                    : '<i class="fa fa-sliders-h me-2"></i> Filtros';
            });

            // Restaurar filtros en los inputs al cargar
            const fechaInicio = localStorage.getItem('reservaFiltroFechaInicio');
            const fechaFin = localStorage.getItem('reservaFiltroFechaFin');
            const estado = localStorage.getItem('reservaFiltroEstado');
            if (fechaInicio) document.getElementById('fechaInicio').value = fechaInicio;
            if (fechaFin) document.getElementById('fechaFin').value = fechaFin;
            if (estado) document.getElementById('estadoFiltro').value = estado;

            // Si hay filtros guardados, aplicar automáticamente al cargar
            if (fechaInicio && fechaFin) {
                fetchReservasFiltradas(0);
            } else if (estado) {
                fetchReservasFiltradas(0);
            }
        });

        function filtrarPorFechas() {
            const fechaInicio = document.getElementById('fechaInicio').value;
            const fechaFin = document.getElementById('fechaFin').value;
            if (!fechaInicio || !fechaFin) {
                Swal.fire('Selecciona ambas fechas', '', 'warning');
                return;
            }
            localStorage.setItem('reservaFiltroFechaInicio', fechaInicio);
            localStorage.setItem('reservaFiltroFechaFin', fechaFin);
            localStorage.removeItem('reservaFiltroEstado');
            fetchReservasFiltradas(0);
        }

        function filtrarPorEstado() {
            const estado = document.getElementById('estadoFiltro').value;
            if (!estado) {
                Swal.fire('Selecciona un estado', '', 'warning');
                return;
            }
            localStorage.setItem('reservaFiltroEstado', estado);
            localStorage.removeItem('reservaFiltroFechaInicio');
            localStorage.removeItem('reservaFiltroFechaFin');
            fetchReservasFiltradas(0);
        }

        function fetchReservasFiltradas(page) {
            const fechaInicio = localStorage.getItem('reservaFiltroFechaInicio');
            const fechaFin = localStorage.getItem('reservaFiltroFechaFin');
            const estado = localStorage.getItem('reservaFiltroEstado');

            if (fechaInicio && fechaFin) {
                fetch('/Reserva/FiltrarPorFechas', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                    body: JSON.stringify({
                        fechaInicio: fechaInicio + 'T00:00:00',
                        fechaFin: fechaFin + 'T23:59:59',
                        page: page
                    })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.error) {
                        Swal.fire(data.error, '', 'error');
                        return;
                    }
                    renderReservas(data.reservas, data.currentPage, data.totalPages);
                })
                .catch(() => Swal.fire('Error al filtrar por fechas', '', 'error'));
            } else if (estado) {
                fetch('/Reserva/FiltrarPorEstado', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                    body: JSON.stringify({ estado: estado, page: page })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.error) {
                        Swal.fire(data.error, '', 'error');
                        return;
                    }
                    renderReservas(data.reservas, data.currentPage, data.totalPages);
                })
                .catch(() => Swal.fire('Error al filtrar por estado', '', 'error'));
            } else {
                window.location.href = '/Reserva/Index?page=' + page;
            }
        }

        function limpiarFiltros() {
            document.getElementById('fechaInicio').value = '';
            document.getElementById('fechaFin').value = '';
            document.getElementById('estadoFiltro').value = '';
            localStorage.removeItem('reservaFiltroFechaInicio');
            localStorage.removeItem('reservaFiltroFechaFin');
            localStorage.removeItem('reservaFiltroEstado');
            location.reload();
        }

        function cambiarPagina(page) {
            fetchReservasFiltradas(page);
        }

        function renderReservas(reservas, currentPage, totalPages) {
            const tbody = document.getElementById('tablaReservas');
            tbody.innerHTML = '';
            if (!reservas || reservas.length === 0) {
                tbody.innerHTML = `<tr><td colspan="8" class="text-center text-secondary">No se encontraron reservas.</td></tr>`;
                return;
            }
            reservas.forEach((reserva, rowIndex) => {
                const id = reserva.iD_Solicitud ?? reserva.ID_Solicitud;
                const cliente = reserva.iD_Cliente ?? reserva.ID_Cliente;
                const inmueble = reserva.iD_Inmueble ?? reserva.ID_Inmueble;
                const fechaInicio = reserva.fecha_Inicio_Reserva ?? reserva.Fecha_Inicio_Reserva;
                const fechaFin = reserva.fecha_Fin_Reserva ?? reserva.Fecha_Fin_Reserva;
                const monto = reserva.monto_Total ?? reserva.Monto_Total;
                const estado = reserva.estado_Reserva ?? reserva.Estado_Reserva;

                tbody.innerHTML += `
                    <tr class="${rowIndex % 2 === 0 ? "" : "table-light"}">
                        <td class="text-center">${id}</td>
                        <td class="text-center">${cliente}</td>
                        <td class="text-center">${inmueble}</td>
                        <td class="text-center">${new Date(fechaInicio).toLocaleDateString()}</td>
                        <td class="text-center">${new Date(fechaFin).toLocaleDateString()}</td>
                        <td class="text-center">S/. ${parseFloat(monto).toFixed(2)}</td>
                        <td class="text-center">
                            <span class="badge ${getEstadoBadgeClass(estado)}">${estado}</span>
                        </td>
                        <td class="text-center">
                            <a href="javascript:void(0);" onclick="verDetalle(${id})" title="Detalle" class="text-dark me-2">
                                <i class="fa fa-magnifying-glass"></i>
                            </a>
                            <a href="javascript:void(0);" onclick="cambiarEstado(${id})" title="Editar" class="text-dark me-2">
                                <i class="fa fa-pen"></i>
                            </a>
                            <a href="javascript:void(0);" onclick="confirmarEliminacion(${id})" title="Eliminar" class="text-danger">
                                <i class="fa fa-trash"></i>
                            </a>
                        </td>
                    </tr>
                `;
            });
        }

        function verDetalle(id) {
            window.location.href = '/Reserva/Detalle/' + id;
        }

        function cambiarEstado(id) {
            if (!id || id <= 0) {
                Swal.fire('ID de reserva inválido.', '', 'warning');
                return;
            }
            Swal.fire({
                title: 'Actualizar estado',
                input: 'select',
                inputOptions: {
                    'Solicitado': 'Solicitado',
                    'Aprobado': 'Aprobado',
                    'Cancelado': 'Cancelado',
                    'Finalizado': 'Finalizado'
                },
                inputPlaceholder: 'Selecciona el nuevo estado',
                showCancelButton: true,
                confirmButtonText: 'Actualizar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed && result.value) {
                    fetch(`/Reserva/ActualizarEstado?id=${id}&estado=${encodeURIComponent(result.value)}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        }
                    })
                    .then(res => res.json())
                    .then(data => {
                        Swal.fire(data.message || 'Estado actualizado', '', data.success ? 'success' : 'error');
                        if (data.success) location.reload();
                    })
                    .catch(() => Swal.fire('Error al actualizar estado', '', 'error'));
                }
            });
        }

        function confirmarEliminacion(id) {
            if (!id || id <= 0) {
                Swal.fire('ID de reserva inválido.', '', 'warning');
                return;
            }
            Swal.fire({
                title: '¿Eliminar reserva?',
                text: 'Esta acción no se puede deshacer',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/Reserva/Eliminar?id=${id}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        }
                    })
                    .then(res => res.json())
                    .then(data => {
                        Swal.fire(data.message || 'Reserva eliminada', '', data.success ? 'success' : 'error');
                        if (data.success) location.reload();
                    })
                    .catch(() => Swal.fire('Error al eliminar reserva', '', 'error'));
                }
            });
        }

        function getEstadoBadgeClass(estado) {
            switch (estado) {
                case "Solicitado": return "bg-warning text-dark";
                case "Aprobado": return "bg-success";
                case "Cancelado": return "bg-danger";
                case "Finalizado": return "bg-info";
                default: return "bg-secondary";
            }
        }
    </script>
</body>
</html>

@functions {
    string GetEstadoBadgeClass(string estado)
    {
        return estado switch
        {
            "Solicitado" => "bg-warning text-dark",
            "Aprobado" => "bg-success",
            "Cancelado" => "bg-danger",
            "Finalizado" => "bg-info",
            _ => "bg-secondary"
        };
    }
}